#!/bin/bash

# Authors: 
#  Kyle Marcus
#  Joe White
# 
# Revision History:
#    Initial version May 2013
#    Updated 2014-06-16

# This script should be called by cron to update the tacc_stats files that are mirrored on this server

# Configuration settings for remote host:

REMOTE_ID=/user/xdtas/.ssh/id_dsa_xdtas_xsede_cron
REMOTE_LOGIN=xdtas@login2.ls4.tacc.utexas.edu
REMOTE_HOSTFILE_PATH=/home1/0000/sge/tacc/hostfile_logs
REMOTE_ACCOUNTING_PATH=/sge_common/default/accounting
REMOTE_LARIAT_PATH=/scratch/projects/lariatData
REMOTE_ARCHIVE_PATH=/scratch/projects/tacc_stats/archive

# Local config settings:
LOCAL_MIRROR_PATH=/data/scratch/Lonestar
LOCAL_HOSTFILE_PATH=${LOCAL_MIRROR_PATH}/hostfile_logs

# Script variables:
CONTROLPATH="$HOME/.ssh/ctl/$$-%L-%r@%h:%p"
RSYNCRSH="ssh -i ${REMOTE_ID} -o ControlPath=${CONTROLPATH}"

function gentimedirlist
{
    export TZ=utc0

    # Note only generate the datestamp once to avoid race condition in date
    # change between invocations

    now=$(date +%Y/%m/%d)

    for (( i = 3; i > 0; i-- ));
    do
        echo -n " "$(date -d "$now - $i day" +%Y/%m/%d)
    done
}

function loginfo
{
    echo "$(date +%Y-%m-%dT%H:%M:%SZ -u) $1"
}

function on_exit
{
    # close the ssh session
    loginfo "Closing SSH connection"
    ssh -O exit -o ControlPath=${CONTROLPATH} ${REMOTE_LOGIN}
}

# Output a script that is run on the remote host. The rsync command is 
# not used to copy the files because the rsync performance is very low
# when run on a parallel FS with lots of files.

function rawTaccStatsTransfer
{
    # note the unquoted cat EOF will be expanded locally. The quoted version
    # is not expanded.
    cat << EOF
#!/bin/bash
archive=${REMOTE_ARCHIVE_PATH}
EOF
    cat << 'EOF'
cd $archive
tf=`mktemp`

lfscmd=ls

for dir in `$lfscmd`
do
    if [ -d $dir ];
    then
        filelist=`$lfscmd $dir | sort -r | head -1`
        for file in ${filelist}
        do
	        echo ${dir}/${file} >> $tf
        done
    fi
done

tar -cf - --directory=$archive -T $tf

rm $tf
EOF
}

trap on_exit EXIT 
set -e

# Create initial ssh connection
loginfo "Create master ssh connection to ${REMOTE_LOGIN}"
ssh -i ${REMOTE_ID} -MnNf -o ControlMaster=yes -o ControlPersist=yes -o ControlPath=${CONTROLPATH} ${REMOTE_LOGIN}

# Update accounting file
loginfo "rsync accounting file"
rsync -v -t -z -e "${RSYNCRSH}" ${REMOTE_LOGIN}:${REMOTE_ACCOUNTING_PATH} ${LOCAL_MIRROR_PATH}/accounting

# Update hostfiles
loginfo "cpio hostfiles"
mkdir -p ${LOCAL_HOSTFILE_PATH}
cd ${LOCAL_HOSTFILE_PATH}
echo "cd ${REMOTE_HOSTFILE_PATH} && find $(gentimedirlist) -print -depth | cpio -o" | ssh -i ${REMOTE_ID} -o ControlPath=${CONTROLPATH} ${REMOTE_LOGIN} "bash -s" | cpio -i -d
cd -

# Update lariat data
loginfo "rsync lariat"
rsync -v -t -r -e "${RSYNCRSH}" ${REMOTE_LOGIN}:${REMOTE_LARIAT_PATH} ${LOCAL_MIRROR_PATH} || true

# Copy archive files
loginfo "copy archive files"
mkdir -p ${LOCAL_MIRROR_PATH}/archive
rawTaccStatsTransfer | ssh -i ${REMOTE_ID} -o ControlPath=${CONTROLPATH} ${REMOTE_LOGIN} "bash -s" | tar xfk - -C ${LOCAL_MIRROR_PATH}/archive

# The exit trap will clean up the ssh connection

